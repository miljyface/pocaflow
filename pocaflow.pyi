from typing import Any, Tuple, List, Optional, overload
import numpy as np

def matmul(a: np.ndarray, b: np.ndarray) -> np.ndarray: ...
def matmul_f64(a: np.ndarray, b: np.ndarray) -> np.ndarray: ...
def matmul_f32_cpu(a: np.ndarray, b: np.ndarray) -> np.ndarray: ...
def dot(a: np.ndarray, b: np.ndarray) -> float: ...
def cross(a: np.ndarray, b: np.ndarray) -> np.ndarray: ...
def magnitude(a: np.ndarray) -> float: ...
def normalize(a: np.ndarray) -> np.ndarray: ...

class Tensor:
    @staticmethod
    def zeros(shape: List[int], dtype: str = "f32") -> "Tensor": ...
    @staticmethod
    def from_array(array: np.ndarray) -> "Tensor": ...
    def shape(self) -> List[int]: ...
    def dtype(self) -> str: ...
    def numel(self) -> int: ...
    def numpy(self) -> np.ndarray: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ... 
